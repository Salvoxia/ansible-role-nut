---
- name: Get installed NUT version
  ansible.builtin.include_tasks: get_installed_nut_version.yml

- name: Gather the package facts
  ansible.builtin.package_facts:
  when: nut_installed

- name: Disable services
  block:
    - name: Populate service facts
      ansible.builtin.service_facts:

    - name: "Find existing NUT services."
      ansible.builtin.set_fact:
        nut_services_existing: "{{ ansible_facts['services'].values() | selectattr('status', 'defined') | rejectattr('status', 'equalto', 'masked') | selectattr('name', 'search', '^nut-.*') | list }}"

    - name: Stop and disable services
      ansible.builtin.service:
        state: stopped
        enabled: false
        name: "{{ item.name }}"
      notify:
        - Systemctl daemon-reload
      when: item.name != 'nut-driver@.service'
            and item.status not in ['not-found', 'failed']
      loop: "{{ nut_services_existing }}"

- name: Uninstall NUT from source
  when: "nut_installed_version is defined and ansible_facts.packages['nut-client'] is not defined"
  block:
    - name: Set uninstall variables
      ansible.builtin.set_fact:
        nut_state: absent
        nut_install_from_source: true

    - name: Uninstall NUT from source
      ansible.builtin.include_tasks: manage_install_from_source.yml

- name: Remove NUT via package manager
  when: "nut_installed_version is defined and ansible_facts.packages['nut-client'] is defined"
  ansible.builtin.include_tasks: uninstall_managed.yml

- name: Uninstall NUT services
  ansible.builtin.include_tasks: service.yml
